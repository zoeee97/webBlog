import{_ as o,X as p,Y as i,$ as s,a0 as n,a1 as t,Z as e,C as c}from"./framework-1e167b4e.js";const l={},u=e(`<h1 id="js中隐式类型转换与toprimitive" tabindex="-1"><a class="header-anchor" href="#js中隐式类型转换与toprimitive" aria-hidden="true">#</a> js中隐式类型转换与toPrimitive</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>我们知道Js的隐式类型转换主要出现在有运算符的情况下【逻辑运算符、关系运算符、算术运算符】。那么在接触toPrimitive之前，我们需要先知道其他值到某个类型值的转换规则。</p><h2 id="其他值到数值的转换规则" tabindex="-1"><a class="header-anchor" href="#其他值到数值的转换规则" aria-hidden="true">#</a> 其他值到数值的转换规则</h2><p>Boolean： true --- 1 false --- 0 Null：0 Undefined：NaN String：若仅含数字，则结果跟用Number()强制转换一致，若存在非数字字符，则返回NaN Symbol不能转换，会报错。</p><p><strong>对象</strong>：会先转换成其对应的原始类型值【也就是基本类型值，像undefined就是基本数据类型，它的值也是Undefined，就是基本类型值】，如果返回的是非数字的原始类型值，就根据上述规则进行类型转换。</p><p>将对象转换成对应的原始类型值，就是进行toPrimitive抽象操作，他会根据传进来的对象以及目标类型，在内部调用不同方法（这里后文会细说），在对于目前对象到数值的转换中，它会优先调用valueOf()，返回结果如果是基本类型值，则直接使用，否则会继续调用toString()。如果这两个方法都不返回原始类型值，则会抛出TypeError。</p><h2 id="其他值到字符串的转换规则" tabindex="-1"><a class="header-anchor" href="#其他值到字符串的转换规则" aria-hidden="true">#</a> 其他值到字符串的转换规则</h2><p>null：&quot;null&quot; undefined： &quot;undefined&quot; Boolean：true --- &quot;true&quot; false --- &quot;false&quot;。 Number ：直接转换，极小和极大的数字会使用指数形式。 Symbol ：只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbol2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> symbol3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>symbol2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: &quot;Symbol(foo)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对象</strong>：也是一样会先转换成其对应的原始类型值，再根据上述规则进行类型转换。不过在这里toPrimitive抽象操作会变成优先调用toString(),再降级到valueOf()。那么我们知道，除非该对象自定义了 toString() 方法，否则调用 toString()一定会是会沿着原型链调用到原型的toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;a&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token operator">==</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token comment">//true</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token operator">==</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token comment">//false</span>
<span class="token comment">//上述过程说明是调用了toString()</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token operator">==</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token comment">//true</span>
<span class="token comment">//上述过程说明是拿到对应的原始类型值，再根据规则进行类型转换</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  	<span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token operator">==</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token comment">//true</span>
<span class="token comment">//上述过程说明是优先调用toString(),再降级到valueOf()去拿到对应的原始类型值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他值到布尔值的转换规则" tabindex="-1"><a class="header-anchor" href="#其他值到布尔值的转换规则" aria-hidden="true">#</a> 其他值到布尔值的转换规则</h2><p>假值： undefined null false +0 -0 NaN &quot;&quot;</p><h2 id="基本类型值在不同操作符的情况下隐式转换的规则" tabindex="-1"><a class="header-anchor" href="#基本类型值在不同操作符的情况下隐式转换的规则" aria-hidden="true">#</a> 基本类型值在不同操作符的情况下隐式转换的规则</h2><ol><li>+运算符的两边有至少一个string类型时，两边都会被隐式转换为字符串；其他情况下两边都会被转换为数字</li><li>其他算术运算符会将两边转成Number类型</li><li>==比较复杂</li></ol>`,16),r=s("strong",null,"布尔值",-1),d=s("strong",null,"一个操作数是字符串，另一个操作数是数值",-1),k=s("strong",null,"对象",-1),v=s("strong",null,"null和undefined相等 null和undefined不能转化为其他类型的值再进行比较。",-1),m=s("strong",null,"任一操作数是NaN",-1),b={href:"http://xn--Object-200k.is",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>若两个操作数都是对象，则比较他们指向的是不是同一个对象。如果两个操作数都指向同一个对象，则会返回true，否则返回false。</p><h2 id="toprimitive是何方神圣" tabindex="-1"><a class="header-anchor" href="#toprimitive是何方神圣" aria-hidden="true">#</a> toPrimitive是何方神圣</h2><p>根据前面的规律，我们发现总有到对象的转换才需要用到toPrimitive。 然后它的本质上是：</p><p><code>ToPrimitive(input, PreferredType)</code></p><blockquote><p>input是调用的对象，PreferredType是期望返回的结果类型</p></blockquote><p>a:判断input是否是对象，如果不是直接return input</p><p>b:根据PreferredType定义hint，hint的取值一共有三种情况：&#39;default&#39;（PreferredType为空）, &#39;number&#39;（PreferredType是number）, &#39;string&#39;（PreferredType是string）</p><p>c:判断该对象是否有Symbol.toPrimitive方法, 如果有则传入参数hint进行调用，若执行结果是基本类型，则return该结果，否则抛出TypeError。 d:如果hint是&#39;default&#39;,则改为&#39;number&#39;。也就是说默认是按&#39;number&#39;。除了Date对象，和Symbol对象。Date对象转换时hint参数是String。Symbol对象进行类型转换会抛出异常。 e: 执行OrdinaryToPrimitive运算 如果hint是&#39;string&#39;，调用toString方法，得到的是原始数据类型，返回该值；否则调用valueOf方法，如果得到的是原始数据类型，返回该值；否则抛出异常 如果hint是&#39;number&#39;，则相反；先调用valueOf方法，得到的是原始数据类型，返回该值；否则调用toString方法，如果得到的是原始数据类型，返回该值；否则抛出异常</p><p>js中加法操作，参数PreferredType一般是Default</p><p>+正号操作，参数PreferredType一般是Number</p><h2 id="valueof和tostring的返回值" tabindex="-1"><a class="header-anchor" href="#valueof和tostring的返回值" aria-hidden="true">#</a> valueOf和toString的返回值</h2><p>（1）对于Object valueOf：返回对象本身 toString：返回的是内部属性&quot;[object type]&quot;字符串。</p><p>（2）对于Array valueOf：返回对象本身 toString: 相当于用数组值调用join(&#39;,&#39;)所返回的字符串。例如：[1,2,3].toString()会是&quot;1,2,3&quot;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&quot;1,2,3&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&quot;&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),h={href:"https://juejin.cn/post/6952701740114247687?searchId=202310181430371A907C5865375B9EEC6D",target:"_blank",rel:"noopener noreferrer"};function g(_,y){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,s("blockquote",null,[s("p",null,[n("如果任一操作数是"),r,n("，则将其转化为数值再比较是否相等。false转化为0，true转化为1. 如果"),d,n("，则会尝试将字符串转化为数值，再比较是否相等。 如果一个操作数是"),k,n("，另一个不是，则获取其原始值，再根据前面的规则进行比较。 在比较时，有如下特殊情况，那就是存在undefined与null的情况： "),v,n("（那就是如果一边存在null和undefined，另一边若不是null或undefined，直接返回false） 若有"),m,n("，则直接返回false。（另外，NaN是Number类型，但是是所有数据类型中唯一与自身不全等的数。"),s("a",b,[n("在Object.is"),t(a)]),n("(NaN,NaN)中才会返回true。）")])]),f,s("p",null,[n("参考："),s("a",h,[n("聊聊JS中的ToPrimitive原始值转换方法 "),t(a)])])])}const j=o(l,[["render",g],["__file","js中隐式类型转换与toPrimitive.html.vue"]]);export{j as default};
