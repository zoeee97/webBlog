import{_ as e,X as t,Y as p,$ as n,a0 as s,a1 as o,Z as c,C as i}from"./framework-1e167b4e.js";const l={},u=n("h1",{id:"js-v8-node-处理输入输出流-在vscode调试js编程题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js-v8-node-处理输入输出流-在vscode调试js编程题","aria-hidden":"true"},"#"),s(" Js（V8/Node）处理输入输出流+在vscode调试js编程题")],-1),r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),d={href:"https://ac.nowcoder.com/acm/contest/5657#question",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="v8" tabindex="-1"><a class="header-anchor" href="#v8" aria-hidden="true">#</a> V8</h2><p>用readline方法，接收的输入数据一律为字符串，要自己处理成相应的数据类型。 注意先要下载readline-sync依赖。</p><h3 id="处理多行输入" tabindex="-1"><a class="header-anchor" href="#处理多行输入" aria-hidden="true">#</a> 处理多行输入</h3><h4 id="单行输出" tabindex="-1"><a class="header-anchor" href="#单行输出" aria-hidden="true">#</a> 单行输出</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//前面四行都是一样的</span>
<span class="token comment">//牛客网：readline</span>
<span class="token comment">//赛码：read_line</span>
<span class="token keyword">var</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span>
<span class="token keyword">var</span> __readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;readline-sync&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
__readline<span class="token punctuation">.</span><span class="token function">setDefaultOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> readline <span class="token operator">=</span> __readline<span class="token punctuation">.</span>prompt<span class="token punctuation">;</span>

<span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//readline()方法接收输入，每次读一行，返回的是字符串</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> lines <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输出结果</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//用print输出结果也可以</span>
    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多行输出" tabindex="-1"><a class="header-anchor" href="#多行输出" aria-hidden="true">#</a> 多行输出</h4><p>用数组来存放。</p><h3 id="处理单行输入" tabindex="-1"><a class="header-anchor" href="#处理单行输入" aria-hidden="true">#</a> 处理单行输入</h3><p>用一次readline()即可。</p><h2 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h2><p>在node环境下输入，是利用了process（进程）对象，process是全局对象，而且process有两个属性可以获取到输入输出流。</p><p>1.process.stdout属性返回一个对象，表示标准输出。</p><p>2.process.stdin返回一个对象，表示标准输入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;readline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdout
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;line&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> tokens <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本地ide调试js编程题" tabindex="-1"><a class="header-anchor" href="#本地ide调试js编程题" aria-hidden="true">#</a> 本地IDE调试JS编程题</h2><p>首先用vscode打开一个空文件夹，在里面创建一个js后缀的文件用于写编程题，选择顶部的运行-添加配置，选择Nodejs，然后它会自动创建好launch.json。之后就可以选中左侧的小蜘蛛图标【运行和调试】去打断点调试了，或者直接在终端输入node xxx.js即可运行。</p>`,16);function v(m,h){const a=i("ExternalLinkIcon");return t(),p("div",null,[u,r,n("p",null,[s("昨晚第一次写带编程题的笔试，之前用c++刷题的时候也知道面试是acm模式，所以也有练；但后来用js刷题，由于刷牛客和力扣这两边都是核心代码模式，就以为js没有acm模式（什么逻辑啊——）。而且昨晚笔试只支持js，所以总之就是大惨败，只写得出核心代码模式的题目。 "),n("a",d,[s("牛客OJ在线编程常见输入输出练习场"),o(a)]),s(" 这个链接可以专门去练习一下输入输出的处理。")]),k])}const _=e(l,[["render",v],["__file","js处理输入输出流.html.vue"]]);export{_ as default};
