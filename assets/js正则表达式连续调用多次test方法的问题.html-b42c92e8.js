const n=JSON.parse(`{"key":"v-ffb1a86c","path":"/posts/js/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9E%E7%BB%AD%E8%B0%83%E7%94%A8%E5%A4%9A%E6%AC%A1test%E6%96%B9%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98.html","title":"js正则表达式连续调用多次test方法的问题","lang":"zh-CN","frontmatter":{"date":"2023-09-01T00:00:00.000Z","category":["mobile"],"tag":["mobile"]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.62,"words":486},"filePathRelative":"posts/js/js正则表达式连续调用多次test方法的问题.md","localizedDate":"2023年9月1日","excerpt":"<h1> js正则表达式连续调用多次test方法的问题</h1>\\n<p>最近在写一道简单leetcode，仅反转字符串的字母。很容易就想到用正则表达式去匹配嘛，然后问题就来了\\n这是我一开始写的逻辑：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">reverseOnlyLetters</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">s</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> temp <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RegExp</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">[a-zA-Z]</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'g'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> l<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>r<span class=\\"token operator\\">=</span>s<span class=\\"token punctuation\\">.</span>length<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n  s <span class=\\"token operator\\">=</span> Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">from</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>l<span class=\\"token operator\\">&lt;</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>r<span class=\\"token operator\\">&gt;=</span><span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>temp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>r<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> r<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>l<span class=\\"token operator\\">&lt;</span>s<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>temp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> l<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>l<span class=\\"token operator\\">&gt;=</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">[</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">[</span>r<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>s<span class=\\"token punctuation\\">[</span>r<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>s<span class=\\"token punctuation\\">[</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span>\\n    l<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">,</span>r<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
