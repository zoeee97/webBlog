import{_ as i,X as p,Y as o,$ as n,a0 as s,a1 as e,Z as t,C as l}from"./framework-1e167b4e.js";const r={},c=t(`<h1 id="vuepress搭建个人博客" tabindex="-1"><a class="header-anchor" href="#vuepress搭建个人博客" aria-hidden="true">#</a> vuepress搭建个人博客</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>市面上的博客框架有很多，鉴于vuepress是静态博客框架，可以部署到GitHub Pages而不用自己提供服务器，并且对前端也非常友好，因此我选择了vuepress，主题选用了vuepress-theme-hope。</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> vuepress-demo
<span class="token builtin class-name">cd</span> vuepress-demo
<span class="token function">npm</span> init vuepress-theme-hope docs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 docs 是一个参数，代表 VuePress Theme Hope 项目的文件夹名称，将项目生成至当前目录下的 docs 文件夹。</p><blockquote><p>创建项目时的选项，需要注意的是： 1.如果不想部署到服务器，想部署到GitHub Pages，记得选需要自动部署的工作流 2.创建的项目类型，推荐使用blog，但在此之前也可以先去了解一下docs和blog的界面区别</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run docs:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时访问localhost:8080即可看到博客页面。</p><h2 id="博客配置" tabindex="-1"><a class="header-anchor" href="#博客配置" aria-hidden="true">#</a> 博客配置</h2>`,10),d={href:"https://vuepress-theme-hope.gitee.io/v2/zh/",target:"_blank",rel:"noopener noreferrer"},u=t('<h3 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置" aria-hidden="true">#</a> 基本配置</h3><p>简洁地说就是，navbar下放的是有关顶部导航栏的配置；public放你需要的静态文件，使用的时候根目录直接用/来表示，比如需要用到/public/assets/logo.png，在配置文件的选项中直接输入/assets/logo.png即可；sidebar用来配置侧边栏；主页用README.md来配置；theme.ts放的是主题选项；config.ts放的是站点选项。默认支持两种语言的配置。</p><p>博客文章靠markdown文档实现，一级标题不会产生侧边栏，所以正文内标题都要从二级标题开始，第一个标题作为文章的名称。tag和category可以定义文章标签和分类。增加新页面时，.vuepress/.temp/interval/pagesData和pagesComponents都会自动产生对应内容。</p><h2 id="部署到github-pages" tabindex="-1"><a class="header-anchor" href="#部署到github-pages" aria-hidden="true">#</a> 部署到GitHub Pages</h2><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h3><p>首先要创建一个公开的仓库。</p><p>config.ts中的base配置项决定了你创建仓库的名字格式。</p>',7),h={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>2.如果要发布到 https://&lt; USERNAME &gt;.github.io/&lt; REPO &gt;，那么仓库名就为&lt; REPO &gt;，相应地，base配置项要修改成&quot;/&lt; REPO &gt;/&quot;。</p><p>创建完成后，在仓库内选择Settings选项，选择Actions下的General，在 Workflow permissions中开放读写权限 Read and write permissions。</p><h3 id="提交代码" tabindex="-1"><a class="header-anchor" href="#提交代码" aria-hidden="true">#</a> 提交代码</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;第一次提交&quot;</span>
<span class="token function">git</span> branch <span class="token parameter variable">-M</span> main
<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:xxx/xxx.git // 你的仓库地址
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置部署分支" tabindex="-1"><a class="header-anchor" href="#设置部署分支" aria-hidden="true">#</a> 设置部署分支</h3><p>打包后的内容会在src/.vuepress/dist中，工作流会自动把这个目录里的内容推送到gh-pages分支中。所以在仓库中，选择Settings-Pages选项，在Build and deployment配置中，将分支从main切换到gh-pages，这意味着这个github页面站点将会从gh-pages分支构建。</p><p>切换部署分支后 ，项目会重新执行一次工作流，之后即可访问https://&lt; USERNAME &gt;.github.io/&lt; REPO &gt;来查看博客页面了。</p><h2 id="使用deploy-sh脚本实现一键部署到github-pages" tabindex="-1"><a class="header-anchor" href="#使用deploy-sh脚本实现一键部署到github-pages" aria-hidden="true">#</a> 使用deploy.sh脚本实现一键部署到GitHub Pages</h2>`,8),m={href:"http://xn--deploy-9v7ii2yp9lcvts2al49ebg5bnhbca2058k.sh",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>

<span class="token comment"># 确保脚本抛出遇到的错误</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># 生成静态文件</span>
<span class="token function">npm</span> run docs:build

<span class="token comment"># 进入生成的文件夹</span>
<span class="token builtin class-name">cd</span> src/.vuepress/dist

<span class="token comment"># 如果是发布到自定义域名</span>
<span class="token comment"># echo &#39;www.example.com&#39; &gt; CNAME</span>

<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy&#39;</span>

<span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span>
<span class="token comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span>

<span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> git@github.com:xxx/xxx.git master:gh-pages

<span class="token builtin class-name">cd</span> -

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后每次在本地更新的时候，直接运行该脚本即可自动部署到github pages中，成功后会发现每次运行脚本，仓库中的gh-pages分支都会有新的提交，<s>从此解放双手</s> 。 运行脚本可以双击运行或者在Bash命令窗中直接输入脚本文件的相对路径。</p><h2 id="整合giscus实现评论功能" tabindex="-1"><a class="header-anchor" href="#整合giscus实现评论功能" aria-hidden="true">#</a> 整合giscus实现评论功能</h2><p>在博客项目运行在本地时可能会碰到一个情况就是，本地明明有评论区的功能，为什么部署到gh-pages反而没有了。这是因为远程仓库没有整合评论系统。这里我们选用giscus。</p><p>在仓库中选择Settings选项卡，在Features配置项中勾选Discussions。之后在Discussions选项卡中可以选择创建一个新的分类Category，也可以用已有的分类。</p>`,5),b={href:"https://giscus.app/zh-CN",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/apps/giscus",target:"_blank",rel:"noopener noreferrer"},f={href:"https://vuepress-theme-hope.gitee.io/v2/comment/zh/config/giscus.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> vuepress-plugin-comment2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> commentPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-comment2&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 站点选项</span>
 <span class="token comment">//...省略前面的配置</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 配置评论</span>
    <span class="token function">commentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">provider</span><span class="token operator">:</span><span class="token string">&quot;Giscus&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">repo</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">repoId</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">category</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">categoryId</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">lazyLoading</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//懒加载</span>
      <span class="token literal-property property">strict</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">mapping</span><span class="token operator">:</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">inputPosition</span><span class="token operator">:</span><span class="token string">&quot;top&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">reactionsEnabled</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后运行脚本部署到gh-pages中，刷新博客地址即可看到效果。</p><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2><p>笔者运行自己的博客时感觉打开速度还是比较慢，之后可能会考虑增加CDN优化gh-pages的说明。</p>`,5);function x(y,E){const a=l("ExternalLinkIcon");return p(),o("div",null,[c,n("p",null,[s("先附上官网链接："),n("a",d,[s("vuepress-theme-hope文档"),e(a)]),s(" 具体配置可以直接看官网文档说明。")]),u,n("p",null,[s('1.如果发布到 https://< USERNAME >.github.io，base就默认是"/"，不用修改，但新建的仓库名称必须为：< USERNAME >.github.io，也就是你的仓库地址为'),n("a",h,[s("https://github.com/"),e(a)]),s("< USERNAME >/< USERNAME >.github.io。")]),v,n("p",null,[n("a",m,[s("在项目的根目录中创建deploy.sh"),e(a)]),s("，把以下代码按照你自己的情况进行修改然后复制粘贴。")]),g,n("p",null,[s("然后可以按照"),n("a",b,[s("giscus文档"),e(a)]),s("去进行配置，配置项根据自己的情况选择（页面-讨论映射推荐选URL那个），但是在此之前要先去下载"),n("a",k,[s("giscus app"),e(a)]),s("，并且只对选中的仓库使用该功能。")]),n("p",null,[s("在前面的内容都完成之后，可以打开本地项目中的config.ts去配置giscus。将【启用giscus】部分里的内容填到对应的配置项，具体可以查看"),n("a",f,[s("vuepress插件文档"),e(a)])]),_])}const R=i(r,[["render",x],["__file","vuepress搭建个人博客.html.vue"]]);export{R as default};
