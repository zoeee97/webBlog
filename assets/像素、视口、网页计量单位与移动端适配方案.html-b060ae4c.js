import{_ as t,X as p,Y as o,$ as n,a0 as a,a1 as e,Z as i,C as c}from"./framework-1e167b4e.js";const l={},u=i(`<h1 id="像素、视口、网页计量单位与移动端适配方案" tabindex="-1"><a class="header-anchor" href="#像素、视口、网页计量单位与移动端适配方案" aria-hidden="true">#</a> 像素、视口、网页计量单位与移动端适配方案</h1><h2 id="像素的概念" tabindex="-1"><a class="header-anchor" href="#像素的概念" aria-hidden="true">#</a> 像素的概念</h2><h3 id="设备像素-物理像素" tabindex="-1"><a class="header-anchor" href="#设备像素-物理像素" aria-hidden="true">#</a> 设备像素（物理像素）</h3><p>指设备能控制显示的最小物理单位，像一个个小点，每一个小像素点都是由三原色RGB组成。物理像素只是为了描述物理分辨率，在屏幕<strong>出厂时就已经固定</strong>了，单位是pt。【<strong>注意区分分辨率和物理分辨率，物理分辨率固定，而分辨率可变且不能超过物理分辨率</strong>】</p><blockquote><p>物理分辨率是液晶屏<strong>固有的参数不能调节</strong>，其含义是指液晶屏最高可显示的像素数，其表示方法与分辨率相同【例如，分辨率1024*768就是指横向有1024个像素点，纵向有768个像素点。】。一般来讲物理分辨率的大小可直接决定屏幕的最高分辨率，分辨率不会大于物理分辨率。</p></blockquote><p>屏幕尺寸一样的情况下，分辨率越高，显示效果就越细腻。</p><h3 id="设备独立像素" tabindex="-1"><a class="header-anchor" href="#设备独立像素" aria-hidden="true">#</a> 设备独立像素</h3><blockquote><p>设备独立像素（又称设备无关像素 Device Independent Pixels 、密度独立性 Density Independent或设备独立像素，简称DIP或DP）是一种物理测量单位，基于计算机控制的坐标系统和抽象像素（虚拟像素），由底层系统的程序使用，转换为物理像素的应用。 典型的用途是允许移动设备软件将信息显示和用户交互扩展到不同的屏幕尺寸。允许应用程序以抽象像素为单位进行测量，而底层图形系统将应用程序的抽象像素测量值转换为适合于特定设备的物理像素。</p></blockquote><p>设备独立像素代表可以通过程序控制使用的虚拟像素。在无缩放情况下，1个CSS像素等于1个设备独立像素；如果放大一倍，1个CSS像素就等于4个设备独立像素，以此类推 <strong>(宽2倍 高2倍)</strong> 。</p><p>通常而言，我们所说的这种可由程序调节设置的分辨率，指的就是设备独立像素。</p><p>1设备独立像素 = 1或N 物理像素 【包含的越多则屏幕看起来越清晰】</p><p>之所以需要设备独立像素，是因为不同设备的物理像素不同，不能只拿其中一个例子作为基准。</p><p><em>在js中可以通过<strong>window.screen.width/ window.screen.height</strong>获取屏幕尺寸（设备独立像素值）</em></p><h3 id="设备像素比dpr" tabindex="-1"><a class="header-anchor" href="#设备像素比dpr" aria-hidden="true">#</a> 设备像素比dpr</h3><p>=设备像素/设备独立像素。 if(drp === 1:1) use 1pt show 1dp if(drp === 2:1) use 4pt show 1dp if(drp === 3:1) use 9pt show 1dp</p><h3 id="像素密度ppi" tabindex="-1"><a class="header-anchor" href="#像素密度ppi" aria-hidden="true">#</a> 像素密度PPI</h3><p>单位是dpi。PPI = 对角线的分辨率 / 对角线尺寸</p><p><strong>PC端中，未缩放的情况下，1个设备独立像素 = 1个设备像素</strong></p><h3 id="css像素" tabindex="-1"><a class="header-anchor" href="#css像素" aria-hidden="true">#</a> CSS像素</h3><p>CSS像素是用于web编程的逻辑像素，以px为单位。px是相对单位，但是相对的是分辨率，跟ppi和dpr都有关系。</p><p><strong>无缩放情况下，1个CSS像素等于1个设备独立像素</strong>。</p><h2 id="网页中的计量单位" tabindex="-1"><a class="header-anchor" href="#网页中的计量单位" aria-hidden="true">#</a> 网页中的计量单位</h2><h3 id="px" tabindex="-1"><a class="header-anchor" href="#px" aria-hidden="true">#</a> px</h3><p>px表示像素，如果理解成相对单位，那是因为它是相对于设备像素而言的；如果理解成绝对单位，那是因为它的实际显示大小与元素是无关的。通常会理解成绝对长度单位。</p><h3 id="rem" tabindex="-1"><a class="header-anchor" href="#rem" aria-hidden="true">#</a> rem</h3><p>相对HTML根元素字体大小（浏览器默认字体大小是16px）。</p><h3 id="em" tabindex="-1"><a class="header-anchor" href="#em" aria-hidden="true">#</a> em</h3><p>相对于父元素的字体大小。如过没有被人为设置，则相对于浏览器的默认字体尺寸。 eg.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    我是父元素div
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
        我是子元素p
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span> <span class="token comment">/* 400px */</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> solid 1px black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span> <span class="token comment">/* 20px */</span> 
  <span class="token property">width</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span> <span class="token comment">/* 200px */</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> solid 1px red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是要注意的是，浏览器默认的最小字体是12px，如果要实现更小，只能用transform:scale来缩放比例。</p><h3 id="vw、vh" tabindex="-1"><a class="header-anchor" href="#vw、vh" aria-hidden="true">#</a> vw、vh</h3><p>相对于视口的宽度/高度。把视口分成一百份。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> %</h3><p>相对于包含块的高宽或字体大小来取值。 如果是静态定位和相对定位，则相对于父元素取值； 如果是绝对定位元素，则相对于离它最近的position非static值的祖先元素； 如果是固定定位元素，则相对于视口取值。</p><h2 id="视口viewport" tabindex="-1"><a class="header-anchor" href="#视口viewport" aria-hidden="true">#</a> 视口viewport</h2><p>上述讲述网页中的计量单位是提到了视口的概念，因此在这里也提一下。</p><p>PC端中，视口就是指浏览器的可视区域，宽度由浏览器的窗口的宽决定的，用户可以手动缩放窗口来改变视口大小。</p><p>移动端就分成三种情况：布局视口（Layout Viewport）、视觉视口（Visual Viewport）和理想视口（Ideal Viewport）。</p><h3 id="布局视口layout-viewport" tabindex="-1"><a class="header-anchor" href="#布局视口layout-viewport" aria-hidden="true">#</a> 布局视口layout viewport</h3><p>一般移动设备的浏览器都默认设置了一个 viewport 元标签，定义一个虚拟的布局视口，以解决早期的页面在手机上显示的问题。其大小由浏览器厂商决定，一般设置成980px。<strong>html内的元素都是以布局视口为基准进行布局的</strong>，如果需要显式的修改布局视口的大小，可以用meta标签设置。</p><p>布局视口的宽度/高度可以通过<strong>document.documentElement.clientWidth / Height</strong> 获取。</p><h3 id="视觉视口visual-viewport" tabindex="-1"><a class="header-anchor" href="#视觉视口visual-viewport" aria-hidden="true">#</a> 视觉视口visual viewport</h3><p>顾名思义就是用户可见区域，可以把它就当作是手机屏幕的那个框。用户可以通过缩放的操作来调整视觉视口，而不会影响布局视口。用户放大时，视觉视口将会变小，CSS 像素将跨越更多的物理像素。 默认情况下，移动端浏览器会将视觉视口缩放到与layout 布局视口相同，也就是默认打开页面就能看到整个布局视口里的内容。</p><p>视觉视口的宽度/高度可以通过 <strong>window.innerWidth / window.innerHeight</strong> 获取。</p><h3 id="理想视口ideal-viewport" tabindex="-1"><a class="header-anchor" href="#理想视口ideal-viewport" aria-hidden="true">#</a> 理想视口ideal viewport</h3><p>理想视口就是布局视口的宽度和屏幕同宽，它并不是一种真实存在的视口。</p><p>实现方法：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="利用meta标签设置viewport" tabindex="-1"><a class="header-anchor" href="#利用meta标签设置viewport" aria-hidden="true">#</a> 利用meta标签设置viewport</h3><p>一些重要的属性如下：</p><blockquote><p>width：控制布局视口的大小。 height：和 width 相对应，指定高度。 initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。 maximum-scale：允许用户缩放到的最大比例。 minimum-scale：允许用户缩放到的最小比例。 user-scalable：用户是否可以手动缩放</p></blockquote><h2 id="移动端适配方案" tabindex="-1"><a class="header-anchor" href="#移动端适配方案" aria-hidden="true">#</a> 移动端适配方案</h2><p>终于来到我们要讲的最后重点——移动端适配。它实现的方案有四种：</p><ol><li>rem布局 先用meta标签设置布局视口等于设备宽度，实现理想视口。</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0，minimum-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后根据屏幕分辨率动态设置html的字体大小，达到等比缩放的功能，且需要保证html最终算出来的字体大小，不能小于12px。 这一步我一般使用flexible.js，js内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">flexible</span><span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> document</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> docEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement
    <span class="token keyword">var</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span>

    <span class="token comment">// adjust body font size</span>
    <span class="token keyword">function</span> <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">*</span> dpr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> setBodyFontSize<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// set 1rem = viewWidth / 10</span>
    <span class="token keyword">function</span> <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> rem <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">10</span>
        docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    <span class="token punctuation">}</span>

    <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// reset rem unit on page resize</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> setRemUnit<span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pageshow&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// detect 0.5px supports</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dpr <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> fakeBody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">var</span> testElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
        testElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;.5px solid transparent&#39;</span>
        fakeBody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>testElement<span class="token punctuation">)</span>
        docEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>testElement<span class="token punctuation">.</span>offsetHeight <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            docEl<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;hairlines&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        docEl<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，它会<strong>把设备宽度分为10等份，然后将一等份的大小作为html根元素的font-size值</strong>。因此1rem就等于设备宽度的1等份。</p><p>由于实际开发中不可能每次都自己计算rem值，因此这里推荐一个vscode插件：px to rem &amp; rpx &amp; vw (cssrem)。例如，设计稿一般为750px，那么1等份就是75px，基准值就可以设置成75px，之后开发时直接在css文件里写px会自动提示相应的rem值。 则px换算成rem公式为: px值 / 75 = rem, 例如：100px=100/75=1.33rem</p><ol start="2"><li>媒体查询</li></ol><p>通过查询设备的宽度来执行不同的 css 代码，最终达到界面的配置。</p><ol start="3"><li>vw/vh布局</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把所有需求适配屏幕大小等比缩放的元素都使用 vw 作为单位。不需要缩放的使用 px 做单位。</p><p>但是<strong>缺点</strong>是px转换成vw不一定能整除，会有一定的像素差;而且当容器使用 vw，margin 采用 px 时，很容易造成整体宽度超过 100vw，从而影响布局效果。但是使用 padding 代替 margin，结合 calc()函数使用等等方法来避免。</p><ol start="4"><li>Flex布局</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>高度固定，宽度自适应</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,70),r={href:"https://zhuanlan.zhihu.com/p/68563760",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/m0_37856464/article/details/108622323",target:"_blank",rel:"noopener noreferrer"},k={href:"https://baijiahao.baidu.com/s?id=1771902901740336371&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/46038860",target:"_blank",rel:"noopener noreferrer"},v={href:"https://segmentfault.com/a/1190000004403496?utm_source=sf-related",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/421015955",target:"_blank",rel:"noopener noreferrer"};function b(g,w){const s=c("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[a("设备像素、设备独立像素、CSS像素、分辨率、PPI、devicePixelRatio 的区别"),e(s)])]),n("p",null,[n("a",d,[a("物理像素，逻辑像素(pt)，css像素(px)，像素比(dpr)都是什么？px，em，rem等 都是什么？有什么区别？"),e(s)])]),n("p",null,[n("a",k,[a("尚硅谷-前端移动端适配方案"),e(s)])]),n("p",null,[n("a",m,[a("浅谈移动端中的视口（viewport）"),e(s)])]),n("p",null,[n("a",v,[a("理解flexible.js所需的viewport知识"),e(s)])]),n("p",null,[n("a",h,[a("移动端适配方案"),e(s)])])])}const x=t(l,[["render",b],["__file","像素、视口、网页计量单位与移动端适配方案.html.vue"]]);export{x as default};
