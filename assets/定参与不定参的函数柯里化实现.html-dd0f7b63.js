const n=JSON.parse('{"key":"v-708cd26e","path":"/posts/js/%E5%AE%9A%E5%8F%82%E4%B8%8E%E4%B8%8D%E5%AE%9A%E5%8F%82%E7%9A%84%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%AE%9E%E7%8E%B0.html","title":"定参与不定参的函数柯里化实现","lang":"zh-CN","frontmatter":{"date":"2023-05-17T00:00:00.000Z","category":["js"],"tag":["js"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"参数个数固定","slug":"参数个数固定","link":"#参数个数固定","children":[]},{"level":2,"title":"不定参数","slug":"不定参数","link":"#不定参数","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.46,"words":1338},"filePathRelative":"posts/js/定参与不定参的函数柯里化实现.md","localizedDate":"2023年5月17日","excerpt":"<h1> 定参与不定参的函数柯里化实现</h1>\\n<h2> 前言</h2>\\n<p>首先函数柯里化作为闭包的一种使用场景，指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术，其主要的目的在于避免频繁调用具有相同参数的函数，实现参数的复用。\\n例如将fn(1,2,3)的形式变换成fn(1)(2)(3)。\\n这里就不再赘述它的作用，下文将直接给出定参与不定参的两种实现方式，以及阐述它的实现过程。</p>\\n<h2> 参数个数固定</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">curry</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">fn<span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">...</span>args</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 返回改造后的函数</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  \\t<span class=\\"token comment\\">//拼接参数 这里就用到了闭包的特性，访问外层函数的变量</span>\\n    <span class=\\"token keyword\\">let</span> subArgs <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>args<span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">...</span>arguments<span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token comment\\">// 判断参数长度是否已经满足函数所需参数的长度 递归出口</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>subArgs<span class=\\"token punctuation\\">.</span>length<span class=\\"token operator\\">&gt;=</span> fn<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 满足就直接执行函数</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span>subArgs<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 若不满足，则递归返回柯里化的函数，等待后续参数的传入</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">curry</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span>fn<span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">...</span>subArgs<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
