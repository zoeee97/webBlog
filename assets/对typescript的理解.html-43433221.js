import{_ as e,X as o,Y as c,$ as n,a0 as s,a1 as t,Z as p,C as l}from"./framework-1e167b4e.js";const i={},u=p('<h1 id="对typescript的理解" tabindex="-1"><a class="header-anchor" href="#对typescript的理解" aria-hidden="true">#</a> 对typescript的理解</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>最近面试的时候被问到了关于typescript的问题，答得稀烂，故在此重新梳理知识体系巩固一下。</p><h2 id="typescript的在线编辑器推荐" tabindex="-1"><a class="header-anchor" href="#typescript的在线编辑器推荐" aria-hidden="true">#</a> TypeScript的在线编辑器推荐</h2>',4),r={href:"http://playcode.io",target:"_blank",rel:"noopener noreferrer"},d={href:"http://stackblitz.com",target:"_blank",rel:"noopener noreferrer"},k={href:"http://codesandbox.io",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="es6类的概念以及和构造函数的联系" tabindex="-1"><a class="header-anchor" href="#es6类的概念以及和构造函数的联系" aria-hidden="true">#</a> es6类的概念以及和构造函数的联系</h2><p>在es6以前，js是通过构造函数生成实例对象，以一种基于原型的方式实现，这和传统的面向对象语言不一样，因此也增加了开发者的理解成本。而es6之后，引入了类的概念，它必须由new调用，以class关键字定义，但是它的<em><strong>绝大部分功能依然可以用es5去实现</strong></em>，只是写法更贴近传统面向对象语言基于类的写法，Js的class依然有一些特性没有实现，他<em><strong>本质上还是构造函数</strong></em>，因此也可以把它看成一个语法糖。</p><blockquote><p><em>使用 getter 和 setter 可以改变属性的赋值和读取行为。</em></p></blockquote><p>es6类的写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">notStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;not static func&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">static</span> <span class="token function">dips</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;static func&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果上述代码想要用构造函数去实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
	Point<span class="token punctuation">.</span><span class="token function-variable function">dips</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;static func&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">notStatic</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;not static func&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token comment">//或者静态方法/属性在函数体外写</span>
Point<span class="token punctuation">.</span><span class="token function-variable function">dips</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;static func&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证一下结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> point1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>point1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//&#39;{&quot;x&quot;:1,&quot;y&quot;:2}&#39;</span>

point1<span class="token punctuation">.</span><span class="token function">dips</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//Error: point1.dips is not a function</span>

<span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">notStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//&quot;not static func&quot;</span>
point1<span class="token punctuation">.</span><span class="token function">notStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//&quot;not static func&quot;</span>

Point<span class="token punctuation">.</span><span class="token function">dips</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//&quot;static func&quot;</span>

Point<span class="token punctuation">.</span><span class="token function">notStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//Error: Point.notStatic is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结一下就是</strong>：类中若非显式的定义在this上，则都是定义在类的原型上，而如果用了static修饰符，则是定义在该类本身，不会被实例对象继承，而是以类.静态属性/方法的方式访问。</p><p>另外，私有属性/方法用#实现，继承可以让子类extends父类，或者在子类中用super调用父类的方法，当然在子类中重写父类的方法也是可以的。</p><p><strong>至于js中类和构造函数的关系</strong>，我们可以看以下这一段来自阮一峰es6网站的一段示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">typeof</span> Point <span class="token comment">// &quot;function&quot;</span>
Point <span class="token operator">===</span> <span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p><p>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。</p><p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p><p>因此，在类的实例上面调用方法，其实就是调用原型上的方法。</p></blockquote><p><strong>唯一存在差异的就是：类的内部所有定义的方法，都是不可枚举的，而es5则相反</strong>。</p><h2 id="ts类与es6类的差异" tabindex="-1"><a class="header-anchor" href="#ts类与es6类的差异" aria-hidden="true">#</a> ts类与es6类的差异</h2><p>ts的类本质也是构造函数+原型链。它和es6中的类的概念差异不大，但是它会支持面向对象的所有特性。 它包含以下模块：</p><ul><li>字段（类里面声明的遍历，表示对象的有关数据）</li><li>构造函数（类实例化时会调用）</li><li>方法</li></ul><p>它还支持许多修饰符：</p><ul><li>public 可以自由访问类内的成员</li><li>private 私有 只可以在该类内访问</li><li>protected 受保护的 只能在该类或者子类内访问，不能在实例对象中访问</li><li>readonly 只读 必须在类内声明时或者构造函数内初始化</li><li>static 在类本身定义的方法或属性，不会被实例对象继承</li><li>abstract 抽象 用于定义抽象类和抽象类里的抽象方法【也就是没有具体的实现细节】</li></ul><blockquote><p>抽象类一般用作其他派生类的基类，不能被实例化 <strong>和接口不同的是，接口只有属性和抽象方法【必须由子类具体实现】，而抽象类可以有方法的具体实现细节</strong></p></blockquote><h2 id="接口和类的区别" tabindex="-1"><a class="header-anchor" href="#接口和类的区别" aria-hidden="true">#</a> 接口和类的区别</h2><p>接口是一系列抽象方法声明的集合，只声明但不实现；而类可以声明并实现方法。 类可以用implements关键字去实现接口；接口之间也可以继承；接口甚至也可以继承类。</p><p>那么就会有一个问题，既然接口能做的类也能做，那直接用类不行吗？为什么还需要接口？↓ 当我们想用某个函数统一处理所有具有某个方法的对象作为入参时，接口就显得很重要。</p><p>如果用类写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Essay</span><span class="token punctuation">{</span>
	<span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&#39;Essay!&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">obj</span><span class="token operator">:</span> Essay</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> essay1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Essay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>essay1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样就只能处理Essay类的对象。 当然也可以让每个类都具有getContent方法的实现，或者继承公共父类去重写这个方法也可以。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Essay</span> <span class="token punctuation">{</span>
  <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Essay!&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">EssayChild1</span> <span class="token punctuation">{</span>
  <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;EssayChild1!&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">EssayChild2</span> <span class="token punctuation">{</span>
  <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;EssayChild2!&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">obj</span><span class="token operator">:</span>Essay</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> essay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Essay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> essay1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EssayChild1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> essay2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EssayChild2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>essay<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>essay1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>essay2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Essay!</span>
<span class="token comment">//EssayChild1!</span>
<span class="token comment">//EssayChild2!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然用接口约束函数参数类型，然后用类去实现接口的方法也是可以的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Essay</span> <span class="token punctuation">{</span>
  <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">EssayChild1</span> <span class="token keyword">implements</span> <span class="token class-name">Essay</span><span class="token punctuation">{</span>
  <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;EssayChild1!&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">EssayChild2</span> <span class="token keyword">implements</span> <span class="token class-name">Essay</span><span class="token punctuation">{</span>
  <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;EssayChild2!&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">obj</span><span class="token operator">:</span>Essay</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> essay1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EssayChild1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> essay2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EssayChild2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>essay1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>essay2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//EssayChild1!</span>
<span class="token comment">//EssayChild2!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，在某些应用场景中，也可以直接把类当作接口使用。</p><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>在定义类、接口或函数时无法直接确定具体类型时，就可以使用泛型。尤其是当碰到需要入参和出参的类型一样的场景时，泛型就可以发挥很大作用，而如果直接用any，就相当于关闭了ts类型检查的优势，如果同时写很多个类型的函数，那么代码的重复性又会很高。</p><p>使用方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
test<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">//不指定类型也可以，它会根据入参自动推断类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类中也可以使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> prop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，也可以对泛型的范围进行约束</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">MyInter</span><span class="token punctuation">{</span>
    <span class="token literal-property property">length</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">MyInter</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接把泛型当成一个数据类型去使用就行。</p><h2 id="类型别名type和接口的区别" tabindex="-1"><a class="header-anchor" href="#类型别名type和接口的区别" aria-hidden="true">#</a> 类型别名type和接口的区别</h2><p>一、表示范围 接口只能用来声明对象类型；而类型别名只是为类型创建一个新名称，可以定义基本类型的别名，也可以用来声明联合类型，如 type paramType = number | string，元组类型，如type arrType = [string, string, number]; 二、是否可重复声明 接口可重复声明，ts会将其合并；而type重复声明会报错 三、继承和实现 接口可以被其他接口继承，也可以被类实现</p><h2 id="一些小的知识点" tabindex="-1"><a class="header-anchor" href="#一些小的知识点" aria-hidden="true">#</a> 一些小的知识点</h2><p>当属性是可有可无时，用可选属性? [propName:String]:any代表后面可以加任意及任意多的属性 类型断言：变量 as 类型 直接告诉编译器变量的类型</p><p>ts新增的类型还有：</p>`,45),m=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"新增类型"),n("th",null,"例子"),n("th",null,"描述")])]),n("tbody",null,[n("tr",null,[n("td",null,"字面量"),n("td",null,"其本身"),n("td",null,"限制变量的值就是该字面量的值")]),n("tr",null,[n("td",null,"any"),n("td",null,"*"),n("td",null,"任意类型")]),n("tr",null,[n("td",null,"unknown"),n("td",null,"*"),n("td",null,"类型安全的any")]),n("tr",null,[n("td",null,"void"),n("td",null,"空值（undefined）"),n("td",null,"没有值（或undefined）")]),n("tr",null,[n("td",null,"never"),n("td",null,"没有值"),n("td",null,"不能是任何值")]),n("tr",null,[n("td",null,"tuple"),n("td",null,"[4,5]"),n("td",null,"元组，固定长度数组")]),n("tr",null,[n("td",null,"enum"),n("td",{"A,":"",B:""},"enum"),n("td",null,"枚举")])])],-1),b=p('<h2 id="ts中的两种文件格式" tabindex="-1"><a class="header-anchor" href="#ts中的两种文件格式" aria-hidden="true">#</a> ts中的两种文件格式</h2><ol><li>.ts</li><li>.d.ts</li></ol><p><strong>.ts文件</strong>: 1.既包含类型信息又可执行代码。 2.可以被编译为.js文件，然后，执行代码。 3.用途∶编写程序代码的地方。</p><p><strong>.d.ts 文件</strong>: 1.只包含类型信息的类型声明文件。 2.不会生成.js 文件，仅用于提供类型信息。 3.用途∶为JS提供类型信息。</p><p>引入第三方库的时候，不像js环境了，必须要引入其对应的类型声明文件。</p><h2 id="在vue中使用typescript" tabindex="-1"><a class="header-anchor" href="#在vue中使用typescript" aria-hidden="true">#</a> 在vue中使用typescript</h2><p>我是直接用的vue-cli脚手架去vue create一个项目，然后选择带有typescript的预设。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',8),y={href:"https://zhuanlan.zhihu.com/p/380747008?utm_id=0",target:"_blank",rel:"noopener noreferrer"};function h(g,f){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("TypeScript Playground、"),n("a",r,[s("playcode.io"),t(a)]),s("、"),n("a",d,[s("stackblitz.com"),t(a)]),s("、"),n("a",k,[s("codesandbox.io"),t(a)])]),v,m,b,n("p",null,[n("a",y,[s("TypeScript编程入门（三）类和接口"),t(a)])])])}const j=e(i,[["render",h],["__file","对typescript的理解.html.vue"]]);export{j as default};
