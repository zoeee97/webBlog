import{_ as r,X as p,Y as o,a2 as t,$ as e,a0 as i,a1 as s,Z as a,C as g}from"./framework-1e167b4e.js";const d="/webBlog/assets/1669954382546-da0e5f0f.png",c="/webBlog/assets/1669954755545-4e15f9b4.png",l="/webBlog/assets/1663059421827-44fabffb.png",h="/webBlog/assets/31443FF637CD2D8AB4F04418F44FB6C9-a31fecfe.png",f="/webBlog/assets/1669959333174-e4add4ca.png",b="/webBlog/assets/1670119258398-e6d21493.png",u="/webBlog/assets/1669992356038-1c3bfc5b.png",m="/webBlog/assets/1669992426571-9fe3a8f0.png",_="/webBlog/assets/1669992463927-3d745b53.png",A="/webBlog/assets/1669994812106-43039a54.png",C="/webBlog/assets/1663763345435-2b5f0eea.png",P="/webBlog/assets/1670074528537-cab39a19.png",B="/webBlog/assets/1663917780702-e0894dbf.png",x="/webBlog/assets/1670046636492-641c7109.png",v="/webBlog/assets/1670048056607-8e61363c.png",T="/webBlog/assets/1670053532547-ff057250.png",F="/webBlog/assets/1670053559247-c01679c2.png",I="/webBlog/assets/1670053644170-742586fe.png",N="/webBlog/assets/1670054142826-3b183b68.png",w="/webBlog/assets/1670053594163-a31fb5b4.png",y="/webBlog/assets/1665383841369-4defa212.png",K="/webBlog/assets/1670074101190-557c15dd.png",S="/webBlog/assets/1665386652929-02b27906.png",z="/webBlog/assets/1670082898112-cd70dd8e.png",R="/webBlog/assets/1670118031677-02be09e7.png",D="/webBlog/assets/1670118218627-c0f5ef7f.png",M="/webBlog/assets/1670118402058-af588343.png",k="/webBlog/assets/1670126286239-fac1ced7.png",E="/webBlog/assets/1670143258064-a732c60a.png",q="/webBlog/assets/1670141901976-c8ecc33c.png",G="/webBlog/assets/1670154391429-43be3e99.png",L="/webBlog/assets/1670154915283-9a6cba9b.png",W="/webBlog/assets/1670083319861-eb159da4.png",U="/webBlog/assets/1670083559105-87a837d0.png",H="/webBlog/assets/1670083159419-d4fb8a40.png",V="/webBlog/assets/1670145020488-76dcc9f3.png",Y="/webBlog/assets/1670063075206-89efdf1f.png",j="/webBlog/assets/1670078100993-56676237.png",O="/webBlog/assets/1670078140898-02a21ea6.png",J="/webBlog/assets/1670078397144-3b767829.png",X="/webBlog/assets/1663688332650-b2b7c549.png",Z="/webBlog/assets/1670161420076-d1365744.png",$="/webBlog/assets/1670161628571-9cd682b5.png",Q="/webBlog/assets/1670161955830-5bbc9e03.png",ii="/webBlog/assets/1670911581818-fbbf53c9.png",ai="/webBlog/assets/1670911591801-b78cd569.png",ei="/webBlog/assets/1670906761240-8653198a.png",ti="/webBlog/assets/1670907315241-b40122f9.png",ni="/webBlog/assets/1670907387094-958668d3.png",si="/webBlog/assets/1670907474469-18e46b5c.png",ri="/webBlog/assets/1670911396395-a1b4e203.png",pi={},oi=a('<h1 id="计网复习笔记" tabindex="-1"><a class="header-anchor" href="#计网复习笔记" aria-hidden="true">#</a> 计网复习笔记</h1><blockquote><p>做了两场笔试发现前端选择题考的大多是计网、组原等计算机基础，而这些知识点已经很久没捡起来过了，所以开始翻出来以前复习时总结的知识点开始报复性复习orz</p></blockquote><h3 id="简答题" tabindex="-1"><a class="header-anchor" href="#简答题" aria-hidden="true">#</a> 简答题</h3><h4 id="_1-网络协议栈各层中英文名称及主要功能" tabindex="-1"><a class="header-anchor" href="#_1-网络协议栈各层中英文名称及主要功能" aria-hidden="true">#</a> 1.网络协议栈各层中英文名称及主要功能</h4><figure><img src="'+d+'" alt="1669954382546" tabindex="0" loading="lazy"><figcaption>1669954382546</figcaption></figure>',5),gi=a('<figure><img src="'+c+'" alt="1669954755545" tabindex="0" loading="lazy"><figcaption>1669954755545</figcaption></figure><figure><img src="'+l+'" alt="1663059421827" tabindex="0" loading="lazy"><figcaption>1663059421827</figcaption></figure><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+f+'" alt="1669959333174" tabindex="0" loading="lazy"><figcaption>1669959333174</figcaption></figure><figure><img src="'+b+'" alt="1670119258398" tabindex="0" loading="lazy"><figcaption>1670119258398</figcaption></figure><h4 id="_2-电路交换和分组交换比较" tabindex="-1"><a class="header-anchor" href="#_2-电路交换和分组交换比较" aria-hidden="true">#</a> 2.电路交换和分组交换比较</h4>',6),di=a('<p>电路交换需要事先建立连接，是同步的，关键资源取决于交换机的容量，资源是预先分配且不共享的，复用的方式有：频分FDM，时分TDM；当到达速率大于链路输出速率时，直接拒绝，发送数据的形式是比特流，且不需要携带地址信息（建立连接时才需要地址信息）。</p><p>分组交换是以分组为单位存储-转发方式，传输时使用全部带宽，而不再将网络带宽资源分片；不需要事先建立连接，是异步的，资源是按需分配且共享的，采用统计多路复用，当到达速率大于链路输出速率时会让分组排队等待传输，但如果路由器的缓存用完了就会直接丢弃；发送数据的形式是数据报，且每个数据报都要携带地址信息。</p><h4 id="_3-有连接与无连接比较" tabindex="-1"><a class="header-anchor" href="#_3-有连接与无连接比较" aria-hidden="true">#</a> 3.有连接与无连接比较</h4><p>网络层和传输层都提供了有连接和无连接的服务方式。</p><p><strong>网络层</strong>： 分组交换网络分成两种网络服务方式——<strong>数据报和虚电路</strong>方式。数据报是一种无连接的网络服务，虚电路是一种面向连接的网络服务。</p><p>数据报的概念就是： 在网络层上，数据包都是自己独立路由的，每个数据包都有目的端和源端的详细地址，这样就导致了最后到达目的端的数据包是无序的。 虚电路的概念就是： 在网络层上，源端的网络实体和目的端的网络实体在数据包传输之前要进行虚电路的建立。在沿虚电路的路上每一个路由器都会为这路虚电路建立端口映射。在建立完之后，所有的数据包都会沿着该虚电路，按照顺序的到达目的端。</p><blockquote><p>虚电路和数据报都是存储转发，数据报是无连接的，每个分组独立传送；而虚电路在两个主机通信之前要建立连路，每个交换节点中都有相应的标识。虚电路就是两个主机通信之前先确定好路由（即固定的转发传输路径），逻辑上看就像建立了一条连接，实际传输还是分组转发形式（到达某个路由器时，所要用的出口可能正在传输信息，这时还是入队列等待）</p><p>数据报工作原理：源主机传递给目标主机的一系列分组有可能走的是不同路径。无状态路由器，不维护主机间的通信状态。</p><p>虚电路工作原理：靠信令控制信息的传递。建立的连接不仅仅体现在源主机和目标主机之上，而且体现在中间所经过的所有交换节点之上，因此我们也称之为网络层的连接。【而TCP向应用进程提供服务时，它是面向连接，因为这个连接仅仅体现在端系统和TCP实体上</p></blockquote><p><strong>传输层</strong>：主要有两种传输服务方式——<strong>TCP和UDP</strong>，TCP是面向连接的传输方式，UDP是无连接的传输方式。</p><p>TCP socket【本地IP，本地TCP端口，对方IP，对方TCP端口】：TCP服务，两个进程之间的通信需要之前要建立连接；两个进程通信会持续一段时间，通信关系稳定；可以用一个整数表示两个应用实体之间的通信关系，本地标示，<strong>好处：穿过层间接口的信息量少，且对于操作系统也便于管理</strong>。对于使用面向连接服务（TCP）的应用而言，套接字（socket）是<strong>4元组</strong>的一个具有本地意义的标示。整数到四元组的映射。</p><p>对于使用<strong>无连接服务（UDP）的应用</strong>而言【在UDP中】，套接字是<strong>2元组</strong>的一个具有本地意义的标示。<strong>UDP socket</strong>：目标端口+目标IP</p><p>TCP因为需要对方的反馈，所以是4个数，而UDP管杀不管埋，发就完事了所以只需要2数就成了</p><p>TCP实际上传两样：报文 + socket。UDP传输 报文 + socket + 目标地址信息（IP + PORT)）</p><p>应用层通过传输层提供的服务建立socket</p><h4 id="_4-两台主机通过tcp-ip协议簇发送和接受应用数据的过程" tabindex="-1"><a class="header-anchor" href="#_4-两台主机通过tcp-ip协议簇发送和接受应用数据的过程" aria-hidden="true">#</a> 4.两台主机通过TCP/IP协议簇发送和接受应用数据的过程</h4><p>ARP协议属于TCP/IP协议簇。</p><p>主机D准备ICMP的echo request报文，并放入IP报文负载部分。IP报文的源IP和目的IP分别为主机D和主机A的IP地址。主机D在网络层先将A的IP地址和自己的掩码做相与操作，</p><p>若两者网络前缀一致，则两台主机在一个局域网内，主机D直接广播ARP请求消息，主机A响应该ARP请求，之后主机D构造并直接发出包含ICMP报文的以太网帧。</p><p>若发现两者网络前缀不一致，知道主机A和自己不在一个局域网内，则需要通过默认网关来进行间接投递。由于主机D的ARP缓存为空，因此主机D会先发送ARP请求报文，该请求报文会被封装在以太网广播帧中发送，目的MAC地址是48位比特全为1的广播地址，源MAC地址是主机D的MAC地址。交换机S2接收到该广播帧后，进行自学习，将该帧的源MAC地址和对应端口(5)的映射关系保存在交换表中，同时由于是广播帧，因此不用进行查表操作，直接将该帧从S2的其他端口转发出去。路由器R1接收到该广播帧，解封装出ARP请求报文，知道这是询问自己的，因此接受该请求报文，并给发送相应的ARP响应报文，其中目的MAC地址为主机D的MAC地址，而源MAC地址就是主机D默认网关的MAC地址，且该报文会被封装在以太网的单播帧中发送。同时，其他接收到该广播帧的设备知道不是询问自己的，会丢弃该请求报文。交换机S2接收到该单播帧，记录该帧的源地址和进入交换机的端口号，然后查询该帧的目的MAC地址，由于已经存在该表项，所以通过端口(5)转发该单播帧。主机D接收到单播帧后，解析出ARP响应报文，此时就已经知道其默认网关的MAC地址，将网关MAC地址和网关的IP地址记录到D的ARP表中，然后就可以构造相应的ICMP报文，被封装到IP数据报中，再封装成帧。同时由于之前交换机S2已经记录了R1的表项，因此就可以直接将该帧转发至R1，R1就会接收到该帧，然后解封装得到请求报文的内容，再查询其路由表，转发该报文至相应的下一跳。</p><h4 id="_5-http与dns工作原理与特点" tabindex="-1"><a class="header-anchor" href="#_5-http与dns工作原理与特点" aria-hidden="true">#</a> 5.HTTP与DNS工作原理与特点</h4><blockquote><p>http与tcp的关系：</p><p>（1）首先，http、tcp、udp并不是在一个层（osi七层模型）中，http在应用层，tcp和udp在传输层。</p><p>（2）<strong>http是基于tcp的</strong>，因为发送http请求时，会先进行tcp三次握手的连接。</p><p>（3）http的长连接与短连接，其实就是tcp的长连接与短连接。http1.1开始默认使用长连接，也就是 connection 默认使用 keep-alive关键字。长连接就是只需要在第一次连接时进行tcp三次握手，接下来就不需要了，可以一直使用这个连接，不会立即关闭，与短连接不同。短连接是，每次client和server进行http操作就建立一个连接，请求结束就中断连接。虽然http1.0支持长连接，但是默认的还是短连接。</p></blockquote>',20),ci={href:"//www.moc.com/fac.php%E7%9A%84%E9%93%BE%E6%8E%A5%E5%90%8E%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CWeb%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%A7%E8%A1%8C%E4%BB%A5%E4%B8%8B%E5%8A%A8%E4%BD%9C%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},li=a('<p><strong>访问网站过程分析</strong></p><p>第一步：浏览器分析超链接中的URL   第二步： DNS请求   第三步： DNS回复   第四步： PC向解析出的域名服务器地址发起tcp三次握手   第五步： PC向解析出的域名服务器发出GET请求，请求主页   第六步： 服务器回应HTTP/1.1 200 OK ，返回主页数据包</p><p>HTTP工作过程：</p><p>客户端发起一个与服务器的TCP连接，建立相应套接字，端口号为80；客户端通过该socket向服务器发请求，服务器接收并同意请求后，服务器按照对应协议解释这个请求，然后从本地文件系统中把该对象找到，封装成http的响应报文，再返回给客户端。请求结束后，TCP连接关闭。（在客户端与服务器之间通过该tcp连接交换HTTP报文</p><p>HTTP1.0默认是短链接，而且HTTP是无状态的，不维护会话状态，HTTP1.1是持久连接，可以复用TCP连接，使多个对象(HTTP请求复用同一个TCP连接）可以在一个TCP连接上传输。</p><ol><li>设置缓存cache，浏览器将HTTP请求发给缓存，在缓存中的对象就直接返回，不在的缓存再向原始服务器请求，然后再返回给客户端。降低客户端的请求响应时间，减少原始服务器链路上的流量强度。</li><li>cookie维护状态</li></ol><figure><img src="'+u+'" alt="1669992356038" tabindex="0" loading="lazy"><figcaption>1669992356038</figcaption></figure><figure><img src="'+m+'" alt="1669992426571" tabindex="0" loading="lazy"><figcaption>1669992426571</figcaption></figure><figure><img src="'+_+'" alt="1669992463927" tabindex="0" loading="lazy"><figcaption>1669992463927</figcaption></figure><p>DNS:</p><p>查询有两种：递归查询和迭代查询，前者是别人帮你问，后者是自己问。</p><figure><img src="'+A+'" alt="1669994812106" tabindex="0" loading="lazy"><figcaption>1669994812106</figcaption></figure><p>【简述DNS解析过程】 1.客户机发出查询请求，在本地计算机<strong>缓存</strong>查找，若没有找到，就会将请求发给本地dns服务器 2.本地dns服务器会在自己的区域里面查找，找到即根据此记录进行解析，若没有找到，就会在本地的缓存里面查找 3.本地服务器没有找到客户机查询的信息，就会将此请求发送到根域名dns服务器 4.根域名服务器解析客户机请求的根域部分，它把包含的下一级的dns服务器地址返回给客户机的dns服务器地址 5.客户机的dns服务器根据返回的信息接着访问下一级的dns服务器 6.这样迭代的方法一级一级接近查询的目标，最后在有目标域名的服务器上面得到相应的ip信息 7.客户机的本地dns服务器将查询结果返回客户机 8.客户机根据ip信息访问，完成解析过程</p><h4 id="_6-各类可靠传输协议特点-停等、gbn、sr、tcp" tabindex="-1"><a class="header-anchor" href="#_6-各类可靠传输协议特点-停等、gbn、sr、tcp" aria-hidden="true">#</a> 6.各类可靠传输协议特点（停等、GBN、SR、TCP</h4><p>可靠数据传输rdt</p><p>rdt1.0相当于完全依赖下层可靠信道</p><p>rdt2.0就是比1.0多了个校验和和ACK/NAK</p><p>rdt2.1引入序号机制，从这里开始我们称为<strong>停等协议</strong>（发送方发送一个分组，然后等待接收方的应答）。</p><h5 id="rdt2-1" tabindex="-1"><a class="header-anchor" href="#rdt2-1" aria-hidden="true">#</a> rdt2.1</h5><p>RDT2.1解决了RDT2.0的致命缺陷：接收端的状态对于发送端来说是不可见的，这会导致双方可能出现状态不一致的情况。新增了序号机制。我们将这种协议称为停止-等待协议：发送方发送完之后等待对方确认，<strong>一次只有一个分组等待确认</strong>。（也因此**只用一位((0和1))**就足够代表分组的序号了</p><p><strong>接收端正确接收则返回ACK，但是ACK不一定能传到，因此我们引入序列号</strong>【毕竟package在传输过程中会出错，ACK和NAK当然也可能会出错】，每个数据都有唯一一个序列号，若数据是重传的则序列号肯定一致，则<strong>接收端可以检验收到的数据序列号是否和上次接收的数据序列号相同，若相同则说明数据重复</strong>。</p><p>就是ACK/NAK出错时，发送方不知道接收方状态，此时就重传旧的分组，接收方会根据分组的序号自行检验该分组是否是重复的数据【就是比如第一次传的时候返回ACK，但是出错传成了乌拉乌拉，发送方重传，这时接收方要再次发送ACK，但是因为序号重复而丢弃重传分组（不发给上层）】</p><h5 id="rdt2-2" tabindex="-1"><a class="header-anchor" href="#rdt2-2" aria-hidden="true">#</a> rdt2.2</h5><figure><img src="'+C+'" alt="1663763345435" tabindex="0" loading="lazy"><figcaption>1663763345435</figcaption></figure><p>收到同一个分组的冗余ACK就说明它没有正确收到该分组的下一个分组，然后就可以重传下一个分组</p><p>rdt 2.2 是在有比特差错信道上实现的一个无NAK的可靠数据传输协议。</p><p>rdt 2.1和rdt 2.2的区别在于，接收方此时必须包括由一个ACK报文所确认的分组序号</p><h5 id="rdt3-0" tabindex="-1"><a class="header-anchor" href="#rdt3-0" aria-hidden="true">#</a> rdt3.0</h5><blockquote><p>引入：下层信道可能会出现丢失分组（ACK或数据），因此可能会出现这样的情况：1.数据丢了：发送端在等ACK，而接收端在等数据，就会造成死锁。因此引入超时重传机制。2.ACK丢了：ACK丢了由于有超时重传机制，会重发分组。但由于有序号的存在，分组重复也没关系，接收方丢弃即可。</p></blockquote><p>在 rdt 3.0 中，丢包的问题让发送方解决。不管是发送的分组丢失，还是接收方返回的确认分组丢失，只要在经过一定的时延后，让发送方重发该分组即可。</p><p>由此产生的 冗余数据分组 则由接收方通过序号处理。<strong>为了实现基于时间的重传机制，需要一个倒计时定时器</strong>。在发送完某分组时启动该定时器。</p><p><strong>这里需要注意的是，如果发送方发送的分组package1没有通过校验和，接收方依然会发送上一个正确接收的分组的ACK0说明该分组（package1出错），但是发送方不会立即做出反应，它会等到定时器超时了再重传，这是因为它无法判断ACK0是上一个的确认分组的延迟到达导致，还是因为当前分组校验和出错导致。而stop timer 只会在接受到正确的信息才会执行,所以这样做避免了重复的发送。</strong></p><p>到rdt3.0中，分组序号都只需要一位来实现即可，引入流水线后则不是。</p><p>rdt3.0的核心问题在于他是一个停等协议，效率低，因此<strong>引入流水线</strong>。</p><p><strong>流水线的差错恢复有两种基本方法</strong>：</p><ul><li>​ 回退 N 步</li><li>​ 选择重传</li></ul><p>GBN和SR都有发送缓冲区和接收缓冲区的概念，只有分组序号在接收缓冲区内的分组才允许接收，而发送缓冲区则是用来存放可以发送或是已发送但未经确认的分组，以便后来检错重传和超时重传。</p><h5 id="gbn" tabindex="-1"><a class="header-anchor" href="#gbn" aria-hidden="true">#</a> GBN</h5><p>GBN发送方维护发送窗口大小N和一个期待收到的最小待确认分组序号send_base，以及next Sequence变量，表示上层需要发送分组时，可以使用的序号。send_base~next Sequence-1这一部分的分组是已发送但是尚未收到确认的，其中base是尚未收到确认的最小序号，只有当发送方收到确认序号为base的ACK后才会向前移动窗口，而<strong>如果接收方接收的不是按顺序到达的分组，那么接收方也会丢掉所有失序分组。同时，回退N步策略对序号为n的分组采取累积确认的方式，即当收到序号为n的ACK时，表明序号小于等于n的分组全部到位。如果超时了发送方也会重传所有未经确认的分组</strong>。</p><p>GBN的窗口大小最大为**2<sup>n-1**。用*GBN协议*,*发送窗口的大小W的范围是1~2</sup>n-1。即最大窗口是2^n-1*</p><h5 id="sr" tabindex="-1"><a class="header-anchor" href="#sr" aria-hidden="true">#</a> SR</h5><p>SR又在GBN上有所改进，避免单个分组的差错导致GBN大量重传的分组充斥在信道内。因此SR对每个分组都设置了定时器进行分别确认，同时可以乱序接收分组，当接收到的分组序号为send_base时才向前滑动窗口到序号最小的未经确认的分组处。从上层接收数据： 检查下一个可用于该分组的序号，若在发送方的窗口内，则将数据打包发送。 超时： 定时器再次用来防止丢失分组。但是现在<strong>每个分组必须得有单独的定时器</strong>。 收到 ACK：倘若该分组序号在窗口内，则 SR 发送方将那个被确认的分组标记为已接收。如果该分组的序号等于send_base，则窗口基序号向前移动到具有最小序号的未确认分组处。如果窗口移动了并且该序号落在窗口内的未发送分组，则发送这些分组。</p><p>分别确认每个分组。</p><p><strong>发送窗口大小最大为2^(n-1)</strong></p><table><thead><tr><th>协议</th><th>发送窗口</th><th>接收窗口</th><th>定时器</th><th>ACK</th><th>序号位数</th></tr></thead><tbody><tr><td>SW</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>GBN</td><td>＞1</td><td>1</td><td>1</td><td>累计确认</td><td>N</td></tr><tr><td>SR</td><td>＞1</td><td>＞1</td><td>＞1</td><td>分别确认</td><td>N</td></tr></tbody></table><p>发送窗口反映了该协议一次能发送几个未经确认的分组，而接收窗口的大小也反映了一些信息，例如：SW和GBN的接收窗口为1说明这两种协议都只能按顺序接收分组，而SR的接收窗口&gt;1说明它可以乱序接收分组，每个分组进行单独确认。</p><h5 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h5><p>应用进程往下层交的报文到了TCP之后，TCP会根据MSS的大小，将报文分成一个个报文段，并在每个MSS段之前加上TCP的头部，形成TCP报文段。</p><p><strong>要注意的是</strong>，TCP协议是pipeline协议，而之前讲到的可靠数据传输原理中对流水线协议有两种基本方法：GBN和SR。而<strong>TCP协议区别于这两者，更像是两者的结合</strong>。首先，TCP协议的序号是字节序号，他的确认是累积确认，比如发送确认号位555的ACK，说明接收方希望发送方从555开始发送（<strong>包括555</strong>）；且只有一个定时器（这个定时器只和发出去的且未经确认的最小序号报文段相关联），一旦超时，他只会重传最老的哪个报文段而不会把所有发出去的段都重传。</p><p>收到ACK50后又收到连续三个冗余的ACK50，触发重传，把该段发出去，而不是定时器触发的重传，我们把这个重传称为<strong>快速重传</strong>。</p><p><strong>冗余ACK的原因</strong>：序号最小的报文没有被收到，后面的几个先收到了，接收方三次收到比期望序号大的数据都会发送一次期望序号的（最老）ACK。这个时候虽然没有超时，但是三个冗余ACK让发送方猜测序号较小的数据报出了问题，会立即重新发送，节约时间</p><p>顺序接收：因为有了分组编号，接收方收到乱序的分组后，不会选择丢弃，而是缓存起来，排好序。返回的ACK仍然是第一个未收到的分组序号。</p><figure><img src="'+P+'" alt="1670074528537" tabindex="0" loading="lazy"><figcaption>1670074528537</figcaption></figure><figure><img src="'+B+'" alt="1663917780702" tabindex="0" loading="lazy"><figcaption>1663917780702</figcaption></figure><h4 id="_7-tcp连接建立过程和关闭过程" tabindex="-1"><a class="header-anchor" href="#_7-tcp连接建立过程和关闭过程" aria-hidden="true">#</a> 7.TCP连接建立过程和关闭过程</h4><p>建立过程：</p><figure><img src="'+x+'" alt="1670046636492" tabindex="0" loading="lazy"><figcaption>1670046636492</figcaption></figure><p>第一次握手[SYN]：客户端发起连接，将SYN置位，表明这个数据包是 SYN 报文段。产生随机序号，客户端进入连接状态等待服务器端确认。relative-sequence-number是相对序号，使他从0开始，但他的值不是真实的0。这一次发送的目的是告诉服务器，自己的<strong>初始序列号</strong></p><p>第二次握手[SYN,ACK]：当服务器接收到客户端的连接请求后，就会向客户端发送 <strong>ACK</strong> 表示自己收到了连接请求。同时还需要告诉客户端 服务器端的初始序号，而由于piggy-backing捎带技术就不需要分两次完成，直接在一个数据包里完成即可。因此数据包同时还将SYN置位。【注意，第二次握手的ack确认号字段的值是在第一次握手的初始序号上加1（区别于ACK标志位）。这是因为TCP协议中，确认号是指期望从另一方收到的下一个字节的序号。】服务器发送完数据包后等待客户端的确认。</p><p>第三次握手[ACK]：客户端收到服务器端的确认连接，检查ACK是否为1，ack值是否为序号值+1，如果是，则将ACK置位，ack=第二次握手初始序号+1。客户端发送完后，建立连接。</p><p>第三次握手存在的必要性是因为，避免服务器端的确认ACK延时或者丢包从而导致产生半连接。</p><p>这是建立 TCP 连接的最后一步，经过前两次握手，客户端（服务器）已经知道对方的滑动窗口大小，初始序列号等信息了，服务器虽然把数据包发出去了，但他还不知道客户端是否收到了这个包，所以服务器需要等待客户端返回一个 ACK，表明客户端收到了数据，至此，连接完成。</p><p>关闭过程：</p><figure><img src="'+v+'" alt="1670048056607" tabindex="0" loading="lazy"><figcaption>1670048056607</figcaption></figure>',64),hi=a('<p>第一次挥手[FIN]：此次是客户端主动释放连接。因此客户端置位FIN，客户端向服务器端发送FIN报文，假设其序号为I，之后客户端结束ESTABLISHED状态，停止向服务器端发送数据（但是能发送ACK确认报文），进入FIN_WAIT_1，等待服务器端的确认。</p><p>第二次挥手[ACK]：而后服务器端接收到客户端的释放连接请求，ACK置位，确认号为I+1，假设其序号为J，服务器端向客户端发送ACK应答报文，结束ESTABLISHED状态，进入CLOSED_WAIT关闭等待状态。</p><p>第三次挥手[FIN,ACK]：客户端接收到服务器端的ACK应答报文，进入FIN_WAIT_2状态，等待服务器端处理完数据后向其发送FIN报文，报文包括FIN和ACK标志位（都为1），确认号和第二次挥手的确认号一致【表示是在收到客户端报文的基础上，将其序号Seq值加1作为本段报文确认号Ack的值。】，序号设为W， 服务器端进入LAST_ACK阶段。</p><p>第四次挥手[ACK]：客户端接收到FIN报文，结束FIN_WAIT_2状态，向服务器发送ACK报文，序列号为I+1，确认号为W+1，进入TIME_WAIT阶段等待2MSL后释放连接。服务器端收到ACK报文后立即释放TCP连接。【如果发重传一定是在1个MSL内完成，所以要两个。一个是等对端发FIN报文，一个是自身发ACK报文</p><h4 id="_8-多路复用和多路分解" tabindex="-1"><a class="header-anchor" href="#_8-多路复用和多路分解" aria-hidden="true">#</a> 8.多路复用和多路分解</h4><figure><img src="'+T+'" alt="1670053532547" tabindex="0" loading="lazy"><figcaption>1670053532547</figcaption></figure><figure><img src="'+F+'" alt="1670053559247" tabindex="0" loading="lazy"><figcaption>1670053559247</figcaption></figure><figure><img src="'+I+'" alt="1670053644170" tabindex="0" loading="lazy"><figcaption>1670053644170</figcaption></figure><figure><img src="'+N+'" alt="1670054142826" tabindex="0" loading="lazy"><figcaption>1670054142826</figcaption></figure><figure><img src="'+w+'" alt="1670053594163" tabindex="0" loading="lazy"><figcaption>1670053594163</figcaption></figure><h4 id="_9-tcp拥塞控制机制和流量控制机制" tabindex="-1"><a class="header-anchor" href="#_9-tcp拥塞控制机制和流量控制机制" aria-hidden="true">#</a> 9.TCP拥塞控制机制和流量控制机制</h4><h4 id="piggy-backing-捎带机制" tabindex="-1"><a class="header-anchor" href="#piggy-backing-捎带机制" aria-hidden="true">#</a> Piggy-backing 捎带机制</h4><p>全双工*（Full Duplex）是通讯传输的一个术语。通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合。<em>全双工</em>指可以同时（瞬时）进行信号的双向传输（A→B且B→A）。</p><p>通信交互的双方一般不是单向的，在双向的传输中，会将Sequence Number和Request Number（两者相互独立）打包在一起发送(以及空闲缓冲区大小)，一次传输同时实现接收方和发送方的功能。这是提高效率的重要手段。</p><h5 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h5><p>TCP是端对端的，但是服务器和客户端的速率不一定匹配。如果发的快收的慢，会导致接收方缓冲区溢出</p><figure><img src="'+y+'" alt="1665383841369" tabindex="0" loading="lazy"><figcaption>1665383841369</figcaption></figure><p>如果<strong>接收方的接受速率不足</strong>，发送方就应该减缓发送的速率，避免接收方溢出。发送速率的控制是通过发送的滑动窗口大小来控制的。</p><p>通过上面的报文，我们能看见16位的窗口大小。这个窗口，就是接收方维护的一块变量，值代表接收方缓冲区还剩余多少可用的缓存空间。</p><p>16位窗口----不是滑动窗口的大小，滑动窗口的大小是固定的，他是用来记录接受缓冲区的大小，如果大小为0，就不会发送数据了。以此达到流量控制。</p><figure><img src="'+K+'" alt="1670074101190" tabindex="0" loading="lazy"><figcaption>1670074101190</figcaption></figure><h5 id="拥塞控制机制" tabindex="-1"><a class="header-anchor" href="#拥塞控制机制" aria-hidden="true">#</a> 拥塞控制机制</h5><p>有时，发送方和接收方性能后很好，结果是中途的网络带宽不行，网络中堵塞了。这时候如果还是依然大量的发送消息，反而会造成更大面积的网络拥塞。</p><p>如何感知网络拥塞？我们可以通过丢包率来判断，根据对应的公式，算出网络拥塞下的发送速率该有多大，进而求出当前的滑动窗口大小。</p><p>原因：对资源需求的总和&gt;可用资源</p><p>表现：丢包（路由器缓冲区溢出）、延迟（在路由器的队列中排队）</p><p>两种常用的拥塞控制方法：</p><p>1.端到端（TCP采用，主流一定支持的） 好处是：只在传输层自己就能完成 缺点是实际上没有来自网络的明确反馈，只能通过推测</p><p>2.网络辅助：路由器提供给端系统以反馈信息</p><p><strong>两个状态、两个阶段</strong></p><p>拥塞窗口&lt;阈值 ： 慢启动阶段（指数级</p><p>拥塞窗口&gt; 阈值 ：拥塞避免阶段（线性</p><p>两个事件：超时事件或3个重复ACK</p><figure><img src="'+S+'" alt="1665386652929" tabindex="0" loading="lazy"><figcaption>1665386652929</figcaption></figure><p>阈值只会在超时或者3个重复ACK时改变，变成拥塞窗口的1/2。</p><p>congwin在重复3个ack时可能是直接等于阈值大小，具体看题目。</p><h4 id="_10-路由转发过程-包括nat和转发时ip中修改的字段" tabindex="-1"><a class="header-anchor" href="#_10-路由转发过程-包括nat和转发时ip中修改的字段" aria-hidden="true">#</a> 10.路由转发过程（包括NAT和转发时IP中修改的字段</h4><p>分成数据平面和控制平面这个思想在FTP中就有体现过。</p><ul><li><strong>转发: 通过单个路口的过程</strong> —— 数据平面</li><li><strong>路由: 从源到目的的路由路径规划过程</strong> —— 控制平面</li></ul><figure><img src="'+z+'" alt="1670082898112" tabindex="0" loading="lazy"><figcaption>1670082898112</figcaption></figure><figure><img src="'+R+'" alt="1670118031677" tabindex="0" loading="lazy"><figcaption>1670118031677</figcaption></figure><p>NAT：网络地址转换</p><p>网络地址转换NAT （NetworkAddress Translation） 在专用网连接到因特网的路由器上安装NAT软件， 安装了NAT软件的路由器叫NAT路由器， 它至少有1个有效的外部全球IP地址</p><figure><img src="'+D+'" alt="1670118218627" tabindex="0" loading="lazy"><figcaption>1670118218627</figcaption></figure><figure><img src="'+M+'" alt="1670118402058" tabindex="0" loading="lazy"><figcaption>1670118402058</figcaption></figure><p>如上图，LAN端指的是内网，WAN端是外网。</p><p>当专用网的主机A想要和因特网上的主机B通信时，就需要发一个数据报，在网络层中封装上源IP地址192.168.0.3和目的IP地址213.18.2.4，在传输层就封装上端口号30000；那么数据报到路由器的时候，NAT路由器就会实现网络地址转换，根据NAT转换表去修改端口号和源IP地址，将其替换成在外网中使用的Ip地址和端口号。这样的一个数据报才可以在因特网中被其他路由器和主机所识别和转发（因为路由器对目的地时私有地址的数据报一律不转发）。</p><p>当NAT路由器接收到来自主机B的数据报时，同样的也要进行地址转换，目的IP地址和端口号转成内网中使用的，才能分发给专用网的具体某一台主机。</p><h4 id="_11-路由算法分类及特点-ls-dv" tabindex="-1"><a class="header-anchor" href="#_11-路由算法分类及特点-ls-dv" aria-hidden="true">#</a> 11.路由算法分类及特点（LS + DV</h4><figure><img src="'+k+'" alt="1670126286239" tabindex="0" loading="lazy"><figcaption>1670126286239</figcaption></figure><figure><img src="'+E+'" alt="1670143258064" tabindex="0" loading="lazy"><figcaption>1670143258064</figcaption></figure><figure><img src="'+q+'" alt="1670141901976" tabindex="0" loading="lazy"><figcaption>1670141901976</figcaption></figure><p>链路状态算法其实就是迪杰斯特拉算法。</p><h4 id="_12-arp协议的工作过程-二层和三层综合" tabindex="-1"><a class="header-anchor" href="#_12-arp协议的工作过程-二层和三层综合" aria-hidden="true">#</a> 12.ARP协议的工作过程（二层和三层综合</h4><figure><img src="'+G+'" alt="1670154391429" tabindex="0" loading="lazy"><figcaption>1670154391429</figcaption></figure><p>主机1发给主机3，这是发送在一个网段内的主机。那接下来在传输层的时候呢，就要把这个大的报文分段就形成了报文段，也就是传输层的传输单元，那这里面是否分段，要根据应用层的这个数据的大小。文件如果比较大的话呢，在传输层就要进行分段。到了网络层，我们拿其中的一个报文段来看，假如说这个1号的报文段，在网络上进行封装就要加上IP地址，一个是源主机的IP地址以及目的主机的IP地址，根据这个DNS我们就可以把这个IP3填入网络层，其实就实现了一个封装，也就从报文段形成了一个IP数据报，也可以称之为分组。那这个分组呢，通常我们指的是这个数据报分片之后的一个结果，那为什么要分片，就是因为可能我们要传输的，这个链路层协议要求的最大传输单元，有一个是要根据这个来决定我们这个要不要在网络层进行分片，那假如这里面就不分片了，那现在就是构成了一个IP数据报。那接下来呢到链路层就封装，这个封装就是要加上mac地址。</p><p><em>FCS</em> (帧校验序列(帧尾))</p><figure><img src="'+L+`" alt="1670154915283" tabindex="0" loading="lazy"><figcaption>1670154915283</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1</span>、两台计算机接入不同的交换机，称之为二层隔离（交换机是二层设备）
<span class="token number">2</span>、二层连通，三层可以隔离。（两台计算机接入了同一个交换机，不一定在一个局域网内）（路由器是三层设备）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>arp协议功能：广播的方式发送数据包，获取目标主机的mac地址
1、通信的第一步先拿到目标主机的ip地址
2、判断出目标主机与自己是否在一个子网（局域网）里
	如果在一个子网里，数据包的走向：
    	源主机----》本地交换机----》目标主机
        
    如果不在一个子网里，数据包的走向：
    	源主机-》本地交换机-》本地路由器----》公网----》目标路由器-》目标交换机-》目标主机
        
详解：

1、拿到目标主机的ip与子网掩码

2、arp协议算出本机的网络地址、目标主机的网络地址

3、判断源的子网地址与目标的子网地址是否一样
# 	如果一样，那么通信就是在同一个子网内通信，靠的是mac地址定位到对方在哪里：
    发送arp协议的广播包拿到目标的mac地址，格式如下
    	自己的mac地址  FF-FF-FF-FF-FF-FF   自己ip/子网掩码  目标ip/子网掩码 数据部分
    	特殊mac地址：FF-FF-FF-FF-FF-FF 收到这个mac地址就表示对方要自己的mac地址
# ps：这个包会以广播的方式在发送端所处的子网内传输，所有主机接收后拆开包，发现目标ip为自己的，就响应，返回自己的mac
4、发起真正的通信
	自己的mac地址   目标主机的mac地址   自己ip/子网掩码  目标ip/子网掩码  源端口   目标端口    数据部分
        
        
#    如果不一样，那么通信不在同一个子网内通信，靠路由器把数据包转发出去：
    发送arp协议的广播包拿到网关的mac地址，格式如下
		自己的mac地址  FF-FF-FF-FF-FF-FF   自己ip/子网掩码  网关ip/子网掩码 数据部分 
4、 发起真正的通信
    	自己的mac地址  网关的mac地址   自己ip/子网掩码  目标ip/子网掩码   源端口   目标端口    数据部分
ps：交换机只有在两种情况下才会把包广播
	1、目标mac是：FF-FF-FF-FF-FF-FF
    2、目标mac不存在与mac地址表中

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设主机A和B在同一个网段，主机A要向主机B发送信息，具体的地址解析过程如下：</p><ol><li>主机A首先查看自己的ARP缓存表，确定其中是否包含有主机B对应的ARP表项。如果找到了对应的MAC地址，则主机A直接利用ARP表中的MAC地址，对IP数据包进行帧封装，并将数据包发送给主机B。</li><li>如果主机A在ARP表中找不到对应的MAC地址，则将缓存该数据报文，然后以广播方式发送一个ARP请求报文。ARP请求报文中的发送端IP地址和发送端MAC地址为主机A的IP地址和MAC地址，目标IP地址和目标MAC地址为主机B的IP地址和全0的MAC地址。由于ARP请求报文以广播方式发送，该网段上的所有主机都可以接收到该请求，但只有被请求的主机（即主机B）会对该请求进行处理。</li><li>主机B比较自己的IP地址和ARP请求报文中的目标IP地址，当两者相同时进行如下处理：将ARP请求报文中的发送端（即主机A）的IP地址和MAC地址存入自己的ARP表中。之后以单播方式发送ARP响应报文给主机A，其中包含了自己的MAC地址。</li><li>主机A收到ARP响应报文后，将主机B的MAC地址加入到自己的ARP表中以用于后续报文的转发，同时将IP数据包进行封装后发送出去。</li></ol><p>当主机A和主机B不在同一网段时，主机A就会先向网关发出ARP请求，ARP请求报文中的目标IP地址为网关的IP地址。当主机A从收到的响应报文中获得网关的MAC地址后，将报文封装并发给网关。如果网关没有主机B的ARP表项，网关会广播ARP请求，目标IP地址为主机B的IP地址，当网关从收到的响应报文中获得主机B的MAC地址后，就可以将报文发给主机B；如果网关已经有主机B的ARP表项，网关直接把报文发给主机B。</p><h4 id="_13-网桥-交换机自学习和帧转发过程" tabindex="-1"><a class="header-anchor" href="#_13-网桥-交换机自学习和帧转发过程" aria-hidden="true">#</a> 13.网桥/交换机自学习和帧转发过程</h4><h4 id="_14-各层网络互联设备的特点-冲突域、广播域等" tabindex="-1"><a class="header-anchor" href="#_14-各层网络互联设备的特点-冲突域、广播域等" aria-hidden="true">#</a> 14.各层网络互联设备的特点（冲突域、广播域等</h4><p>集线器：</p><p>多口中继器:</p><p>从一个链接进入的比特以相同的速率从所有其他链接流出</p><p>连接集线器的节点可能会相互碰撞</p><p>没有帧缓冲</p><p>hub上没有CSMA/CD:主机网卡检测碰撞</p><p>中继器(中继器)</p><p>工作在物理层</p><p>在发送之前重新生成接收到的位</p><p>扩展用户数量或总跨度</p><p>(通过提高传输信号的质量)</p><p>不分离碰撞域(冲突域)</p><h4 id="_15-csma-cd工作方式" tabindex="-1"><a class="header-anchor" href="#_15-csma-cd工作方式" aria-hidden="true">#</a> 15.CSMA/CD工作方式</h4><h3 id="计算题" tabindex="-1"><a class="header-anchor" href="#计算题" aria-hidden="true">#</a> 计算题</h3><h4 id="ip地址和子网掩码" tabindex="-1"><a class="header-anchor" href="#ip地址和子网掩码" aria-hidden="true">#</a> ip地址和子网掩码</h4><p>ipv4 32位地址</p><figure><img src="`+W+'" alt="1670083319861" tabindex="0" loading="lazy"><figcaption>1670083319861</figcaption></figure><figure><img src="'+U+'" alt="1670083559105" tabindex="0" loading="lazy"><figcaption>1670083559105</figcaption></figure><h4 id="ip分片" tabindex="-1"><a class="header-anchor" href="#ip分片" aria-hidden="true">#</a> ip分片</h4><figure><img src="'+H+'" alt="1670083159419" tabindex="0" loading="lazy"><figcaption>1670083159419</figcaption></figure><h4 id="rip路由协议-求某路由器更新后的路由表" tabindex="-1"><a class="header-anchor" href="#rip路由协议-求某路由器更新后的路由表" aria-hidden="true">#</a> RIP路由协议 求某路由器更新后的路由表</h4><figure><img src="'+V+'" alt="1670145020488" tabindex="0" loading="lazy"><figcaption>1670145020488</figcaption></figure><h4 id="tcp序列号、窗口相关计算" tabindex="-1"><a class="header-anchor" href="#tcp序列号、窗口相关计算" aria-hidden="true">#</a> TCP序列号、窗口相关计算</h4><h4 id="四个延时的类似车队排队模型" tabindex="-1"><a class="header-anchor" href="#四个延时的类似车队排队模型" aria-hidden="true">#</a> 四个延时的类似车队排队模型</h4><h4 id="信道利用率和滑动窗口序列号位数" tabindex="-1"><a class="header-anchor" href="#信道利用率和滑动窗口序列号位数" aria-hidden="true">#</a> 信道利用率和滑动窗口序列号位数</h4><p>在通信领域里的单位K，M，G跟计算机里的表示数据量的K,M,G是不同的，通信领域里1G不等于1024（2的十次方）M，而是1000M（10的3次方）。 因此，1Gbps等于10<sup>9bits/s=10</sup>9/8=125MB/s</p><figure><img src="'+Y+'" alt="1670063075206" tabindex="0" loading="lazy"><figcaption>1670063075206</figcaption></figure><figure><img src="'+j+'" alt="1670078100993" tabindex="0" loading="lazy"><figcaption>1670078100993</figcaption></figure><figure><img src="'+O+'" alt="1670078140898" tabindex="0" loading="lazy"><figcaption>1670078140898</figcaption></figure><p>注意GBN可以一次发送多个分组，因此分子这里会变成N*(L1/C1) 至于这个N有多大，得看窗口大小。同时由于题目中说，确认帧总和数据帧等长，因此不能像停等协议那题一样，分母只加一个L/R，而应该再算上确认帧的发送时延，那就是两个L/R。</p>',95),fi={href:"https://so.csdn.net/so/search?q=%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},bi=e("strong",null,"划分的数据帧越小，数据帧窗口越多，信道利用率就会越高",-1),ui=a('<figure><img src="'+J+'" alt="1670078397144" tabindex="0" loading="lazy"><figcaption>1670078397144</figcaption></figure><p>因此一个发送周期内最多可发送的数据帧数：668ms/64ms(发送每个帧的时延) = 10.43个帧</p><p>64ms是用128B/16kb/s算得</p><p>10.43个帧最少需要4个二进制位进行表示，即 2×2×2 &lt; 10.43 &lt;2×2×2×2，故需要帧比特数至少为 4。</p><h4 id="校验和" tabindex="-1"><a class="header-anchor" href="#校验和" aria-hidden="true">#</a> 校验和</h4><figure><img src="'+X+'" alt="1663688332650" tabindex="0" loading="lazy"><figcaption>1663688332650</figcaption></figure><p>校验和的结果是求和结果的反码</p><h4 id="crc" tabindex="-1"><a class="header-anchor" href="#crc" aria-hidden="true">#</a> CRC</h4><figure><img src="'+Z+'" alt="1670161420076" tabindex="0" loading="lazy"><figcaption>1670161420076</figcaption></figure><figure><img src="'+$+'" alt="1670161628571" tabindex="0" loading="lazy"><figcaption>1670161628571</figcaption></figure><p>注意是模2除法。每位异或。</p><figure><img src="'+Q+'" alt="1670161955830" tabindex="0" loading="lazy"><figcaption>1670161955830</figcaption></figure><h4 id="csma-cd-最小帧长度模型" tabindex="-1"><a class="header-anchor" href="#csma-cd-最小帧长度模型" aria-hidden="true">#</a> CSMA/CD 最小帧长度模型</h4><p><img src="'+ii+'" alt="1670911581818" loading="lazy"><img src="'+ai+'" alt="1670911591801" loading="lazy"></p><h4 id="cdma发送消息" tabindex="-1"><a class="header-anchor" href="#cdma发送消息" aria-hidden="true">#</a> CDMA发送消息</h4><figure><img src="'+ei+'" alt="1670906761240" tabindex="0" loading="lazy"><figcaption>1670906761240</figcaption></figure><p>S和T的规格化内积为0，就是将S和T中的对应分量相乘，再相加，再除以向量中分量的数量。</p><figure><img src="'+ti+'" alt="1670907315241" tabindex="0" loading="lazy"><figcaption>1670907315241</figcaption></figure><figure><img src="'+ni+'" alt="1670907387094" tabindex="0" loading="lazy"><figcaption>1670907387094</figcaption></figure><figure><img src="'+si+'" alt="1670907474469" tabindex="0" loading="lazy"><figcaption>1670907474469</figcaption></figure><figure><img src="'+ri+'" alt="1670911396395" tabindex="0" loading="lazy"><figcaption>1670911396395</figcaption></figure><h4 id="shannon定理和nyquist定理" tabindex="-1"><a class="header-anchor" href="#shannon定理和nyquist定理" aria-hidden="true">#</a> Shannon定理和Nyquist定理</h4>',22);function mi(_i,Ai){const n=g("ExternalLinkIcon");return p(),o("div",null,[oi,t(" ![1669954382546](../../.vuepress/public/assets/images/sundry/jiwang/) "),gi,t(" ![img](file:///C:\\Users\\17415\\AppData\\Local\\Temp\\ksohtml39712\\wps1.jpg) "),di,e("p",null,[i("请求/响应交互模型.   在用户点击URL为http："),e("a",ci,[i("//www.moc.com/fac.php的链接后，浏览器和Web服务器执行以下动作："),s(n)]),i("     1 )浏览器分析超链接中的URL     2 )浏览器向DNS请求解析www.moc.com的IP地址     3 ) DNS将解析出的IP地址10.10.10.10返回浏览器     4 )浏览器与服务器建立TCP连接(80端口)     5 )浏览器请求文档： GET /fac.php     6 )服务器给出响应，将文档fac.php发送给浏览器     7 )释放TCP连接     8 )浏览器显示fac.php中的内容")]),li,t(" ![img](file:///C:\\Users\\17415\\AppData\\Local\\Temp\\ksohtml29356\\wps1.jpg) "),hi,e("p",null,[i("在后退N帧"),e("a",fi,[i("流量控制"),s(n)]),i("协议中，"),bi,i("，不过要求信道出错率极低，否则就会不断重传已发送的数据帧。（这句话好像是错的，但姑且还是按最小数据帧来划分吧")]),ui])}const Pi=r(pi,[["render",mi],["__file","计网复习.html.vue"]]);export{Pi as default};
